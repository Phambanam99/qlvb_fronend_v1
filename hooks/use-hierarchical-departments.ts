import { useState, useEffect, useMemo } from "react";
import { departmentsAPI, DepartmentDTO } from "@/lib/api/departments";
import { useAuth } from "@/lib/auth-context";

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho ph√≤ng ban c√≥ c·∫•u tr√∫c ph√¢n c·∫•p
export interface HierarchicalDepartment extends DepartmentDTO {
  children?: HierarchicalDepartment[];
  level: number;
  fullPath: string;
}

export function useHierarchicalDepartments() {
  const [allDepartments, setAllDepartments] = useState<DepartmentDTO[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { user, hasRole } = useAuth();

  // Ki·ªÉm tra n·∫øu user l√† admin ho·∫∑c vai tr√≤ c√≥ quy·ªÅn xem t·∫•t c·∫£
  const hasFullAccess = useMemo(
    () =>
      hasRole([
        "ROLE_ADMIN",
        "ROLE_VAN_THU",
        "ROLE_CUC_TRUONG",
        "ROLE_CUC_PHO",
        "ROLE_CHINH_UY",
        "ROLE_PHO_CHINH_UY",
      ]),
    [hasRole]
  );

  // T·∫£i t·∫•t c·∫£ c√°c ph√≤ng ban
  useEffect(() => {
    const fetchDepartments = async () => {
      try {
        setLoading(true);
        setError(null);
        console.log("Fetching departments...");
        console.log("User info:", {
          user: user?.email,
          departmentId: user?.departmentId,
        });

        // Test if API is working at all
        console.log("Testing API access...");

        const response = await departmentsAPI.getAllDepartments(0, 500);
        console.log("Departments response:", response);
        console.log("Response type:", typeof response);
        console.log("Response keys:", Object.keys(response || {}));

        // Handle the response structure: {message: "Success", data: {content: [...], ...}}
        let departments: DepartmentDTO[] = [];

        if (
          response &&
          response.message === "Success" &&
          response.data &&
          response.data.content &&
          Array.isArray(response.data.content)
        ) {
          departments = response.data.content;
          console.log(
            "‚úÖ Successfully extracted departments from response.data.content:",
            departments.length
          );
        } else if (
          response &&
          (response as any).content &&
          Array.isArray((response as any).content)
        ) {
          departments = (response as any).content;
          console.log(
            "‚úÖ Successfully extracted departments from response.content:",
            departments.length
          );
        } else if (response && Array.isArray(response)) {
          departments = response as any;
          console.log("‚úÖ Response is direct array:", departments.length);
        }

        if (departments.length > 0) {
          setAllDepartments(departments);
          console.log(
            "‚úÖ Successfully set departments:",
            departments.length,
            "departments"
          );
          console.log("First few departments:", departments.slice(0, 3));
        } else {
          console.warn("‚ùå No departments found in response:", response);
          console.warn("Response.data:", (response as any)?.data);
          console.warn("Response.content:", (response as any)?.content);

          // Fallback: Create some test departments if API returns empty
          console.log("üîÑ Creating fallback test departments...");
          const fallbackDepts: DepartmentDTO[] = [
            {
              id: 1,
              name: "VƒÉn ph√≤ng C·ª•c",
              abbreviation: "VPC",
              type: "ADMINISTRATIVE",
              childDepartments: [],
            },
            {
              id: 2,
              name: "Ph√≤ng T·ªï ch·ª©c C√°n b·ªô",
              abbreviation: "TCCB",
              type: "ADMINISTRATIVE",
              parentDepartmentId: 1,
              childDepartments: [],
            },
            {
              id: 3,
              name: "Ph√≤ng K·∫ø ho·∫°ch T√†i ch√≠nh",
              abbreviation: "KHTC",
              type: "ADMINISTRATIVE",
              parentDepartmentId: 1,
              childDepartments: [],
            },
          ];
          setAllDepartments(fallbackDepts);
          console.log("‚úÖ Set fallback departments:", fallbackDepts.length);
        }
      } catch (err: any) {
        console.error("‚ùå L·ªói khi t·∫£i danh s√°ch ph√≤ng ban:", err);
        console.error("Error details:", {
          message: err.message,
          status: err.response?.status,
          statusText: err.response?.statusText,
          data: err.response?.data,
          url: err.config?.url,
        });
        setError(
          `API Error: ${err.response?.status || "Unknown"} - ${err.message}`
        );
        setAllDepartments([]); // Set empty array on error
      } finally {
        setLoading(false);
      }
    };

    // Only fetch if user is available
    if (user) {
      fetchDepartments();
    } else {
      console.log("‚è≥ No user available, skipping departments fetch");
      setLoading(false);
    }
  }, [user]); // Add user as dependency

  // X√¢y d·ª±ng c·∫•u tr√∫c ph√¢n c·∫•p t·ª´ danh s√°ch ph√≤ng ban ph·∫≥ng
  const hierarchicalDepartments = useMemo(() => {
    const buildHierarchy = (
      departments: DepartmentDTO[]
    ): HierarchicalDepartment[] => {
      // T·∫°o b·∫£n ƒë·ªì c√°c ph√≤ng ban b·∫±ng ID
      const deptMap = new Map<number, HierarchicalDepartment>();

      // Kh·ªüi t·∫°o danh s√°ch k·∫øt qu·∫£
      const result: HierarchicalDepartment[] = [];

      // ƒê·∫ßu ti√™n, chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ c√°c ph√≤ng ban th√†nh d·∫°ng ph√¢n c·∫•p
      departments.forEach((dept) => {
        deptMap.set(dept.id, {
          ...dept,
          children: [],
          level: 0,
          fullPath: dept.name,
        });
      });

      // Sau ƒë√≥, x√¢y d·ª±ng c·∫•u tr√∫c c√¢y
      departments.forEach((dept) => {
        const hierarchicalDept = deptMap.get(dept.id);
        if (hierarchicalDept) {
          if (dept.parentDepartmentId) {
            // N·∫øu c√≥ ph√≤ng ban cha, th√™m ph√≤ng ban n√†y v√†o danh s√°ch con c·ªßa ph√≤ng ban cha
            const parent = deptMap.get(dept.parentDepartmentId);
            if (parent) {
              if (!parent.children) {
                parent.children = [];
              }
              hierarchicalDept.level = parent.level + 1;
              hierarchicalDept.fullPath = `${parent.fullPath} > ${dept.name}`;
              parent.children.push(hierarchicalDept);
            } else {
              // N·∫øu kh√¥ng t√¨m th·∫•y ph√≤ng ban cha, th√™m v√†o c·∫•p cao nh·∫•t
              result.push(hierarchicalDept);
            }
          } else {
            // N·∫øu kh√¥ng c√≥ ph√≤ng ban cha, th√™m v√†o c·∫•p cao nh·∫•t
            result.push(hierarchicalDept);
          }
        }
      });

      return result;
    };

    return buildHierarchy(allDepartments);
  }, [allDepartments]);

  // X√¢y d·ª±ng danh s√°ch ph√≤ng ban ph·∫≥ng c√≥ th√¥ng tin c·∫•p b·∫≠c ƒë·ªÉ hi·ªÉn th·ªã trong select
  const flattenedDepartments = useMemo(() => {
    const flatten = (
      departments: HierarchicalDepartment[],
      result: HierarchicalDepartment[] = []
    ) => {
      departments.forEach((dept) => {
        result.push(dept);
        if (dept.children && dept.children.length > 0) {
          flatten(dept.children, result);
        }
      });
      return result;
    };

    return flatten(hierarchicalDepartments);
  }, [hierarchicalDepartments]);

  // L·∫•y ph√≤ng ban c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i v√† c√°c ph√≤ng ban con
  const userDepartmentWithChildren = useMemo(() => {
    if (!user?.departmentId) return [];

    // T√¨m ph√≤ng ban hi·ªán t·∫°i c·ªßa user
    const findDeptWithChildrenById = (
      deptId: number
    ): HierarchicalDepartment | undefined => {
      return flattenedDepartments.find((d) => d.id === deptId);
    };

    const userDept = findDeptWithChildrenById(Number(user.departmentId));
    if (!userDept) return [];

    // L·∫•y t·∫•t c·∫£ ph√≤ng ban con c·ªßa ph√≤ng ban hi·ªán t·∫°i
    const getAllChildrenIds = (dept: HierarchicalDepartment): number[] => {
      const ids = [dept.id];
      if (dept.children && dept.children.length > 0) {
        dept.children.forEach((child) => {
          ids.push(...getAllChildrenIds(child));
        });
      }
      return ids;
    };

    const departmentIds = userDept ? getAllChildrenIds(userDept) : [];

    // L·ªçc ch·ªâ l·∫•y ph√≤ng ban c·ªßa user v√† c√°c ph√≤ng ban con
    return flattenedDepartments.filter((dept) =>
      departmentIds.includes(dept.id)
    );
  }, [flattenedDepartments, user?.departmentId]);

  // Danh s√°ch ph√≤ng ban s·∫Ω hi·ªÉn th·ªã trong select t√πy theo quy·ªÅn c·ªßa ng∆∞·ªùi d√πng
  const visibleDepartments = useMemo(() => {
    const result = hasFullAccess
      ? flattenedDepartments
      : userDepartmentWithChildren;
    console.log("visibleDepartments calculation:", {
      hasFullAccess,
      flattenedDepartmentsCount: flattenedDepartments.length,
      userDepartmentWithChildrenCount: userDepartmentWithChildren.length,
      resultCount: result.length,
      user: user?.email,
      userDepartmentId: user?.departmentId,
    });
    return result;
  }, [hasFullAccess, flattenedDepartments, userDepartmentWithChildren, user]);

  // Danh s√°ch c√°c ID ph√≤ng ban c·ªßa user (bao g·ªìm ph√≤ng ban con)
  const userDepartmentIds = useMemo(() => {
    return userDepartmentWithChildren.map((dept) => dept.id);
  }, [userDepartmentWithChildren]);

  return {
    hierarchicalDepartments,
    flattenedDepartments,
    visibleDepartments,
    userDepartmentWithChildren,
    userDepartmentIds,
    loading,
    error,
    hasFullAccess,
    allDepartments, // Add this for debugging
  };
}
