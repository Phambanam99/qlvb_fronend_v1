"use client"

import { useEffect, useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { ArrowRight, FileText, Calendar, ClipboardList, Send, Loader2, AlertCircle } from "lucide-react"
import Link from "next/link"
import { dashboardAPI } from "@/lib/api"
import { incomingDocumentsAPI } from "@/lib/api"
import { schedulesAPI } from "@/lib/api"
import { useToast } from "@/components/ui/use-toast"
import { useDashboard } from "@/lib/store"
import { useAuth } from "@/lib/auth-context"
import { useRefreshableData } from "@/lib/data-refresh"

// Danh s√°ch vai tr√≤ c√≥ quy·ªÅn xem b·∫£ng ƒëi·ªÅu khi·ªÉn ƒë·∫ßy ƒë·ªß
const FULL_ACCESS_ROLES = [
  "ROLE_ADMIN",
  "ROLE_VAN_THU",
  "ROLE_CUC_TRUONG",
  "ROLE_CUC_PHO",
  "ROLE_CHINH_UY",
  "ROLE_PHO_CHINH_UY",
];

// Danh s√°ch vai tr√≤ c√≥ quy·ªÅn xem d·ªØ li·ªáu ph√≤ng ban
const DEPARTMENT_ACCESS_ROLES = [
  "ROLE_TRUONG_PHONG",
  "ROLE_PHO_PHONG",
  "ROLE_TRUONG_BAN",
  "ROLE_PHO_BAN",
];

// Danh s√°ch vai tr√≤ c√≥ quy·ªÅn xem d·ªØ li·ªáu c√° nh√¢n
const PERSONAL_ACCESS_ROLES = [
  "ROLE_NHAN_VIEN",
  "ROLE_TRO_LY",
];

export default function Home() {
  const { toast } = useToast()
  const { user, hasRole, setDataLoaded } = useAuth()
  const { refreshTrigger, isAppReady } = useRefreshableData()
  const {
    stats,
    recentDocuments,
    todayEvents,
    loading,
    error,
    setStats,
    setRecentDocuments,
    setTodayEvents,
    setLoading,
    setError,
  } = useDashboard()
  
  // State ƒë·ªÉ theo d√µi tr·∫°ng th√°i loading chi ti·∫øt
  const [isStatsLoading, setIsStatsLoading] = useState(true)
  const [isDocumentsLoading, setIsDocumentsLoading] = useState(true)
  const [isEventsLoading, setIsEventsLoading] = useState(true)
  const [isUserLoaded, setIsUserLoaded] = useState(false)
  
  // X√°c ƒë·ªãnh quy·ªÅn truy c·∫≠p c·ªßa ng∆∞·ªùi d√πng
  const hasFullAccess = FULL_ACCESS_ROLES.some((role) => hasRole(role))
  const hasDepartmentAccess = DEPARTMENT_ACCESS_ROLES.some((role) => hasRole(role))
  const hasPersonalAccess = PERSONAL_ACCESS_ROLES.some((role) => hasRole(role))
  
  // X√°c ƒë·ªãnh xem ng∆∞·ªùi d√πng c√≥ quy·ªÅn xem b·∫£ng ƒëi·ªÅu khi·ªÉn kh√¥ng
  const canViewDashboard = hasFullAccess || hasDepartmentAccess || hasPersonalAccess
  
  // C·∫≠p nh·∫≠t tr·∫°ng th√°i user loaded sau khi user ƒë∆∞·ª£c fetch
  useEffect(() => {
    if (user) {
      console.log("üë§ Th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ t·∫£i xong:", {
        id: user.id,
        name: user.fullName,
        roles: user.roles,
        department: user.departmentId
      })
      setIsUserLoaded(true)
    }
  }, [user])
  
  // C·∫≠p nh·∫≠t tr·∫°ng th√°i loading t·ªïng th·ªÉ
  useEffect(() => {
    // Ch·ªâ ƒë·∫∑t loading = false khi t·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ t·∫£i xong
    const isFullyLoaded = isUserLoaded && !isStatsLoading && !isDocumentsLoading && !isEventsLoading
    
    console.log("Tr·∫°ng th√°i loading c·ªßa dashboard:", {
      isUserLoaded,
      isStatsLoading,
      isDocumentsLoading, 
      isEventsLoading,
      isFullyLoaded
    })
    
    setLoading(!isFullyLoaded)
    
    // Th√¥ng b√°o cho AuthContext khi d·ªØ li·ªáu ƒë√£ t·∫£i xong
    if (isFullyLoaded) {
      // ƒê√°nh d·∫•u d·ªØ li·ªáu ƒë√£ t·∫£i xong trong AuthContext
      setDataLoaded()
    }
  }, [isStatsLoading, isDocumentsLoading, isEventsLoading, isUserLoaded, setLoading, setDataLoaded])

  // T·∫°o fetchDashboardData function v·ªõi useCallback ƒë·ªÉ tr√°nh t·∫°o l·∫°i function m·ªói khi component re-render
  const fetchDashboardData = useCallback(async () => {
    try {
      // N·∫øu ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn xem b·∫£ng ƒëi·ªÅu khi·ªÉn, kh√¥ng t·∫£i d·ªØ li·ªáu
      if (!canViewDashboard) {
        console.log("User does not have permission to view dashboard")
        setIsStatsLoading(false)
        setIsDocumentsLoading(false)
        setIsEventsLoading(false)
        setError("B·∫°n kh√¥ng c√≥ quy·ªÅn xem b·∫£ng ƒëi·ªÅu khi·ªÉn")
        return
      }
      
      if (!user) {
        console.log("ƒêang ƒë·ª£i th√¥ng tin ng∆∞·ªùi d√πng...");
        return; // Ch·ªù cho ƒë·∫øn khi user ƒë∆∞·ª£c t·∫£i xong
      }
      
      console.log(`üîÑ T·∫£i l·∫°i d·ªØ li·ªáu dashboard - refresh trigger: ${refreshTrigger} - App ready: ${isAppReady}`);
    }, [user, canViewDashboard, refreshTrigger, isAppReady, setIsStatsLoading, setIsDocumentsLoading, setIsEventsLoading, setError])
  
  // Effect ƒë·ªÉ t·∫£i d·ªØ li·ªáu khi component mount ho·∫∑c refresh trigger thay ƒë·ªïi
  useEffect(() => {
    // Ch·ªâ t·∫£i d·ªØ li·ªáu khi ƒë√£ authenticate v√† c√≥ user
    if (user) {
        
        console.log("B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu dashboard:", new Date().toISOString());
        // ƒê·∫∑t t·∫•t c·∫£ c√°c th√†nh ph·∫ßn th√†nh tr·∫°ng th√°i loading
        setIsStatsLoading(true)
        setIsDocumentsLoading(true)
        setIsEventsLoading(true)
        setError(null)

        // Fetch dashboard statistics d·ª±a tr√™n quy·ªÅn truy c·∫≠p
        let dashboardStats
        let incomingDocs
        
        // 1. T·∫¢I TH·ªêNG K√ä B·∫¢NG ƒêI·ªÄU KHI·ªÇN
        console.log("1Ô∏è‚É£ ƒêang t·∫£i th·ªëng k√™ b·∫£ng ƒëi·ªÅu khi·ªÉn...")
        if (hasFullAccess) {
          // Admin, vƒÉn th∆∞, c·ª•c tr∆∞·ªüng: xem t·∫•t c·∫£ d·ªØ li·ªáu
          console.log("T·∫£i th·ªëng k√™ ƒë·∫ßy ƒë·ªß cho admin/c·ª•c tr∆∞·ªüng")
          dashboardStats = await dashboardAPI.getDashboardStatistics()
        } else if (hasDepartmentAccess && user?.departmentId) {
          // Tr∆∞·ªüng ph√≤ng, ph√≥ ph√≤ng: ch·ªâ xem d·ªØ li·ªáu c·ªßa ph√≤ng ban
          console.log("T·∫£i th·ªëng k√™ cho ph√≤ng ban:", user.departmentId)
          // Hi·ªán t·∫°i ch∆∞a c√≥ API ri√™ng n√™n v·∫´n d√πng API chung
          dashboardStats = await dashboardAPI.getDashboardStatistics()
        } else if (hasPersonalAccess && user?.id) {
          // Nh√¢n vi√™n, tr·ª£ l√Ω: ch·ªâ xem d·ªØ li·ªáu c√° nh√¢n
          console.log("T·∫£i th·ªëng k√™ cho nh√¢n vi√™n ID:", user.id)
          dashboardStats = await dashboardAPI.getDashboardStatistics()
        } else {
          // Fallback - tr·∫£ v·ªÅ d·ªØ li·ªáu r·ªóng
          dashboardStats = {
            incomingDocumentCount: 0,
            pendingDocumentCount: 0,
            outgoingDocumentCount: 0,
            workCaseCount: 0
          }
        }
        console.log("‚úÖ Ho√†n t·∫•t t·∫£i th·ªëng k√™:", dashboardStats)
        // C·∫≠p nh·∫≠t th·ªëng k√™ d·ª±a tr√™n d·ªØ li·ªáu ƒë√£ l·ªçc
        setStats({
          incomingDocuments: {
            total: dashboardStats.incomingDocumentCount,
            pending: dashboardStats.pendingDocumentCount || 0,
          },
          outgoingDocuments: {
            total: dashboardStats.outgoingDocumentCount,
            pending: 0, 
          },
          workPlans: {
            total: dashboardStats.workCaseCount,
            active: 0,
          },
          schedules: {
            total: 0,
            today: 0,
          },
        })
        // ƒê√°nh d·∫•u th·ªëng k√™ ƒë√£ t·∫£i xong
        setIsStatsLoading(false)
        
        // 2. T·∫¢I DANH S√ÅCH VƒÇN B·∫¢N G·∫¶N ƒê√ÇY
        console.log("2Ô∏è‚É£ ƒêang t·∫£i danh s√°ch vƒÉn b·∫£n...")
        if (hasFullAccess) {
          incomingDocs = await incomingDocumentsAPI.getAllDocuments()
        } else if (hasDepartmentAccess && user?.departmentId) {
          incomingDocs = await incomingDocumentsAPI.getDepartmentDocuments(user.departmentId)  
        } else if (hasPersonalAccess && user?.id) {
          // L·∫•y danh s√°ch vƒÉn b·∫£n ƒë∆∞·ª£c ph√¢n c√¥ng cho nh√¢n vi√™n
          if (user.departmentId) {
            incomingDocs = await incomingDocumentsAPI.getDepartmentDocuments(user.departmentId)
            // L·ªçc ch·ªâ vƒÉn b·∫£n ƒë∆∞·ª£c ph√¢n c√¥ng cho user
            if (incomingDocs && incomingDocs.content) {
              incomingDocs.content = incomingDocs.content.filter((doc: any) => 
                doc.assignedToIds && 
                Array.isArray(doc.assignedToIds) && 
                doc.assignedToIds.includes(user.id)
              )
            }
          } else {
            // N·∫øu kh√¥ng c√≥ departmentId, tr·∫£ v·ªÅ danh s√°ch r·ªóng
            incomingDocs = { content: [] }
          }
        } else {
          incomingDocs = { content: [] }
        }
        
        console.log("‚úÖ Ho√†n t·∫•t t·∫£i vƒÉn b·∫£n m·ªõi:", {
          total: incomingDocs?.content?.length || 0
        })
        
        // C·∫≠p nh·∫≠t danh s√°ch vƒÉn b·∫£n g·∫ßn ƒë√¢y
        setRecentDocuments(
          (incomingDocs.content || []).slice(0, 3).map((doc: any) => ({
            id: doc.id,
            number: doc.documentNumber,
            title: doc.title,
          })),
        )
        // ƒê√°nh d·∫•u vƒÉn b·∫£n ƒë√£ t·∫£i xong
        setIsDocumentsLoading(false)

        // 3. T·∫¢I S·ª∞ KI·ªÜN TRONG NG√ÄY
        console.log("3Ô∏è‚É£ ƒêang t·∫£i s·ª± ki·ªán trong ng√†y...")
        const today = new Date().toISOString().split("T")[0]
        try {
          // Gi·∫£ l·∫≠p t·∫£i s·ª± ki·ªán
          // const events = await schedulesAPI.getScheduleEvents({ date: today })
          // setTodayEvents(
          //   events.slice(0, 2).map((event) => ({
          //     id: event.id,
          //     title: event.title,
          //     time: event.startTime,
          //     location: event.location,
          //   })),
          // )
          // M·∫∑c ƒë·ªãnh ƒë·ªÉ tr·ªëng
          setTodayEvents([])
        } catch (eventError) {
          console.error("Kh√¥ng th·ªÉ t·∫£i s·ª± ki·ªán:", eventError)
          setTodayEvents([])
        }
        // ƒê√°nh d·∫•u s·ª± ki·ªán ƒë√£ t·∫£i xong
        setIsEventsLoading(false)
        
        console.log("‚úÖ ƒê√£ t·∫£i xong t·∫•t c·∫£ d·ªØ li·ªáu dashboard", new Date().toISOString())
      } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu dashboard:", error)
        setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b·∫£ng ƒëi·ªÅu khi·ªÉn. Vui l√≤ng th·ª≠ l·∫°i sau.")
        toast({
          title: "L·ªói",
          description: "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b·∫£ng ƒëi·ªÅu khi·ªÉn. Vui l√≤ng th·ª≠ l·∫°i sau.",
          variant: "destructive",
        })
      } finally {
        // ƒê·∫£m b·∫£o t·∫•t c·∫£ ƒë·ªÅu ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ƒë√£ ho√†n th√†nh, k·ªÉ c·∫£ khi c√≥ l·ªói
        setIsStatsLoading(false)
        setIsDocumentsLoading(false)
        setIsEventsLoading(false)
      }
    }

    fetchDashboardData()
    // G·ªçi l·∫°i h√†m fetch n·∫øu user thay ƒë·ªïi
  }, [canViewDashboard, hasFullAccess, hasDepartmentAccess, hasPersonalAccess, setError, setRecentDocuments, setStats, setTodayEvents, toast, user])

  if (loading) {
    return (
      <div className="flex h-[80vh] items-center justify-center">
        <div className="text-center">
          <Loader2 className="mx-auto h-8 w-8 animate-spin text-primary" />
          <p className="mt-2 text-sm text-muted-foreground">ƒêang t·∫£i d·ªØ li·ªáu...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="flex h-[80vh] items-center justify-center">
        <div className="text-center">
          <div className="rounded-full bg-red-100 p-3 mx-auto w-16 h-16 flex items-center justify-center">
            <AlertCircle className="h-8 w-8 text-red-500" />
          </div>
          <h2 className="mt-4 text-xl font-semibold">ƒê√£ x·∫£y ra l·ªói</h2>
          <p className="mt-2 text-sm text-muted-foreground">{error}</p>
          <Button onClick={() => window.location.reload()} className="mt-4">
            Th·ª≠ l·∫°i
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-8">
      <div className="flex flex-col space-y-2">
        <h1 className="text-3xl font-bold">B·∫£ng ƒëi·ªÅu khi·ªÉn</h1>
        <p className="text-muted-foreground">Qu·∫£n l√Ω vƒÉn b·∫£n v√† c√¥ng t√°c c·ªßa ƒë∆°n v·ªã</p>
      </div>

      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
        <Card className="card-hover">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">VƒÉn b·∫£n ƒë·∫øn</CardTitle>
            <FileText className="h-4 w-4 text-primary" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.incomingDocuments.total}</div>
            <p className="text-xs text-muted-foreground mt-1">{stats.incomingDocuments.pending} vƒÉn b·∫£n ch∆∞a x·ª≠ l√Ω</p>
          </CardContent>
        </Card>
        <Card className="card-hover">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">VƒÉn b·∫£n ƒëi</CardTitle>
            <Send className="h-4 w-4 text-primary" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.outgoingDocuments.total}</div>
            <p className="text-xs text-muted-foreground mt-1">{stats.outgoingDocuments.pending} vƒÉn b·∫£n ch·ªù duy·ªát</p>
          </CardContent>
        </Card>
        <Card className="card-hover">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">K·∫ø ho·∫°ch</CardTitle>
            <ClipboardList className="h-4 w-4 text-primary" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.workPlans.total}</div>
            <p className="text-xs text-muted-foreground mt-1">{stats.workPlans.active} k·∫ø ho·∫°ch ƒëang th·ª±c hi·ªán</p>
          </CardContent>
        </Card>
        <Card className="card-hover">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">L·ªãch c√¥ng t√°c</CardTitle>
            <Calendar className="h-4 w-4 text-primary" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.schedules.total}</div>
            <p className="text-xs text-muted-foreground mt-1">{stats.schedules.today} l·ªãch c√¥ng t√°c h√¥m nay</p>
          </CardContent>
        </Card>
      </div>

      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        <Card className="col-span-1 md:col-span-2">
          <CardHeader>
            <CardTitle>VƒÉn b·∫£n c·∫ßn x·ª≠ l√Ω</CardTitle>
            <CardDescription>Danh s√°ch vƒÉn b·∫£n ƒë·∫øn c·∫ßn ƒë∆∞·ª£c x·ª≠ l√Ω</CardDescription>
          </CardHeader>
          <CardContent>
            {recentDocuments.length > 0 ? (
              <div className="space-y-6">
                {recentDocuments.map((doc) => (
                  <div key={doc.id} className="flex items-center justify-between border-b pb-4">
                    <div>
                      <p className="font-medium">{doc.number}</p>
                      <p className="text-sm text-muted-foreground mt-1">{doc.title}</p>
                    </div>
                    <Button variant="ghost" size="sm" className="rounded-full" asChild>
                      <Link href={`/van-ban-den/${doc.id}`}>
                        <ArrowRight className="h-4 w-4" />
                      </Link>
                    </Button>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-sm text-muted-foreground">Kh√¥ng c√≥ vƒÉn b·∫£n n√†o c·∫ßn x·ª≠ l√Ω</p>
            )}
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>L·ªãch c√¥ng t√°c h√¥m nay</CardTitle>
            <CardDescription>C√°c s·ª± ki·ªán trong ng√†y</CardDescription>
          </CardHeader>
          <CardContent>
            {todayEvents.length > 0 ? (
              <div className="space-y-6">
                {todayEvents.map((event) => (
                  <div key={event.id} className="flex items-start space-x-4 border-b pb-4">
                    <div className="flex flex-col items-center">
                      <div className="text-sm font-medium bg-accent rounded-full w-12 h-12 flex items-center justify-center">
                        {event.time}
                      </div>
                      <div className="h-full w-px bg-border mt-1"></div>
                    </div>
                    <div>
                      <p className="font-medium">{event.title}</p>
                      <p className="text-sm text-muted-foreground mt-1">{event.location}</p>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-sm text-muted-foreground">Kh√¥ng c√≥ s·ª± ki·ªán n√†o h√¥m nay</p>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
